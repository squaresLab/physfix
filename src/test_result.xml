<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C++" filename="dump_to_ast_test/test_19.cpp" tabs="8"><comment type="line" start="1:1" end="1:63">//  ///////////////////////////////////////////////////////////</comment>
<comment type="line" start="2:1" end="2:2">//</comment>
<comment type="line" start="3:1" end="3:29">// turtlebot_example_node.cpp</comment>
<comment type="line" start="4:1" end="4:60">// This file contains example code for use with ME 597 lab 1</comment>
<comment type="line" start="5:1" end="5:61">// It outlines the basic setup of a ros node and the various </comment>
<comment type="line" start="6:1" end="6:22">// inputs and outputs.</comment>
<comment type="line" start="7:1" end="7:3">// </comment>
<comment type="line" start="8:1" end="8:30">// Author: James Servos. 2012 </comment>
<comment type="line" start="9:1" end="9:2">//</comment>
<comment type="line" start="10:1" end="10:61">// //////////////////////////////////////////////////////////</comment>

<include start="12:1" end="12:20">#<directive start="12:2" end="12:8">include</directive> <file start="12:10" end="12:20">&lt;ros/ros.h&gt;</file></include>
<include start="13:1" end="13:52">#<directive start="13:2" end="13:8">include</directive> <file start="13:10" end="13:52">&lt;geometry_msgs/PoseWithCovarianceStamped.h&gt;</file></include>
<include start="14:1" end="14:32">#<directive start="14:2" end="14:8">include</directive> <file start="14:10" end="14:32">&lt;geometry_msgs/Twist.h&gt;</file></include>
<include start="15:1" end="15:35">#<directive start="15:2" end="15:8">include</directive> <file start="15:10" end="15:35">&lt;tf/transform_datatypes.h&gt;</file></include>


<decl_stmt start="18:1" end="18:13"><decl start="18:1" end="18:12"><type start="18:1" end="18:6"><name start="18:1" end="18:6">double</name></type> <name start="18:8" end="18:8">X</name><init start="18:9" end="18:12">=<expr start="18:10" end="18:12"><literal type="number" start="18:10" end="18:12">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt start="20:1" end="20:13"><decl start="20:1" end="20:12"><type start="20:1" end="20:6"><name start="20:1" end="20:6">double</name></type> <name start="20:8" end="20:8">Y</name><init start="20:9" end="20:12">=<expr start="20:10" end="20:12"><literal type="number" start="20:10" end="20:12">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt start="21:1" end="21:23"><decl start="21:1" end="21:22"><type start="21:1" end="21:6"><name start="21:1" end="21:6">double</name></type> <name start="21:8" end="21:18">yaw_degrees</name><init start="21:19" end="21:22">=<expr start="21:20" end="21:22"><literal type="number" start="21:20" end="21:22">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt start="22:1" end="22:12"><decl start="22:1" end="22:11"><type start="22:1" end="22:3"><name start="22:1" end="22:3">int</name></type> <name start="22:5" end="22:9">state</name><init start="22:10" end="22:11">=<expr start="22:11" end="22:11"><literal type="number" start="22:11" end="22:11">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt start="23:1" end="23:49"><decl start="23:1" end="23:16"><type start="23:1" end="23:6"><name start="23:1" end="23:6">double</name></type> <name start="23:8" end="23:12">err_x</name><init start="23:13" end="23:16">=<expr start="23:14" end="23:16"><literal type="number" start="23:14" end="23:16">0.0</literal></expr></init></decl>,<decl start="23:18" end="23:26"><type ref="prev" start="23:1" end="23:6"/><name start="23:18" end="23:22">err_y</name><init start="23:23" end="23:26">=<expr start="23:24" end="23:26"><literal type="number" start="23:24" end="23:26">0.0</literal></expr></init></decl>,<decl start="23:28" end="23:36"><type ref="prev" start="23:1" end="23:6"/><name start="23:28" end="23:32">err_d</name><init start="23:33" end="23:36">=<expr start="23:34" end="23:36"><literal type="number" start="23:34" end="23:36">0.0</literal></expr></init></decl>,<decl start="23:38" end="23:48"><type ref="prev" start="23:1" end="23:6"/><name start="23:38" end="23:44">err_yaw</name><init start="23:45" end="23:48">=<expr start="23:46" end="23:48"><literal type="number" start="23:46" end="23:48">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt start="24:1" end="24:37"><decl start="24:1" end="24:16"><type start="24:1" end="24:6"><name start="24:1" end="24:6">double</name></type> <name start="24:8" end="24:12">vel_x</name><init start="24:13" end="24:16">=<expr start="24:14" end="24:16"><literal type="number" start="24:14" end="24:16">0.0</literal></expr></init></decl>,<decl start="24:18" end="24:26"><type ref="prev" start="24:1" end="24:6"/><name start="24:18" end="24:22">vel_y</name><init start="24:23" end="24:26">=<expr start="24:24" end="24:26"><literal type="number" start="24:24" end="24:26">0.0</literal></expr></init></decl>,<decl start="24:28" end="24:36"><type ref="prev" start="24:1" end="24:6"/><name start="24:28" end="24:32">ang_z</name><init start="24:33" end="24:36">=<expr start="24:34" end="24:36"><literal type="number" start="24:34" end="24:36">0.0</literal></expr></init></decl>;</decl_stmt>

<function start="26:1" end="47:1"><type start="26:1" end="26:4"><name start="26:1" end="26:4">void</name></type> <name start="26:6" end="26:11">goal_d</name><parameter_list start="26:12" end="26:44">(<parameter start="26:13" end="26:22"><decl start="26:13" end="26:22"><type start="26:13" end="26:22"><name start="26:13" end="26:18">double</name></type> <name start="26:20" end="26:22">x_t</name></decl></parameter>,<parameter start="26:24" end="26:33"><decl start="26:24" end="26:33"><type start="26:24" end="26:33"><name start="26:24" end="26:29">double</name></type> <name start="26:31" end="26:33">y_t</name></decl></parameter>, <parameter start="26:36" end="26:43"><decl start="26:36" end="26:43"><type start="26:36" end="26:43"><name start="26:36" end="26:41">double</name></type> <name start="26:43" end="26:43">t</name></decl></parameter>)</parameter_list>
<block start="27:1" end="47:1">{<block_content start="29:9" end="45:9">
	
	<expr_stmt start="29:9" end="29:20"><expr start="29:9" end="29:19"><name start="29:9" end="29:13">err_x</name><operator start="29:14" end="29:14">=</operator><name start="29:15" end="29:17">x_t</name><operator start="29:18" end="29:18">-</operator><name start="29:19" end="29:19">X</name></expr>;</expr_stmt>
	<expr_stmt start="30:9" end="30:20"><expr start="30:9" end="30:19"><name start="30:9" end="30:13">err_y</name><operator start="30:14" end="30:14">=</operator><name start="30:15" end="30:17">y_t</name><operator start="30:18" end="30:18">-</operator><name start="30:19" end="30:19">Y</name></expr>;</expr_stmt>
	<expr_stmt start="31:9" end="32:24"><expr start="31:9" end="32:23"><name start="31:9" end="31:13">err_d</name><operator start="31:14" end="31:14">=</operator><call start="31:15" end="32:23"><name start="31:15" end="31:18">sqrt</name><argument_list start="31:19" end="32:23">(<argument start="31:20" end="32:22"><expr start="31:20" end="32:22"><name start="31:20" end="31:24">err_x</name><operator start="31:25" end="31:25">*</operator><name start="31:26" end="31:30">err_x</name><operator start="31:31" end="31:31">+</operator>
	<name>x_t</name><operator>*</operator><name>mult<argument_list>(<argument><expr><name>err_x</name></expr></argument>,<argument><expr><literal>5</literal></expr></argument></argument_list>)</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt start="33:9" end="33:30"><expr start="33:9" end="33:29"><name start="33:9" end="33:15">err_yaw</name><operator start="33:16" end="33:16">=</operator><name start="33:17" end="33:17">t</name><operator start="33:18" end="33:18">-</operator><name start="33:19" end="33:29">yaw_degrees</name></expr>;</expr_stmt>
	<comment type="line" start="34:9" end="34:43">//if(err_yaw&lt;0)err_yaw=err_yaw+360;</comment>
	
	<if_stmt start="36:9" end="45:9"><if start="36:9" end="37:30">if<condition start="36:11" end="36:32">(<expr start="36:12" end="36:31"><name start="36:12" end="36:16">err_x</name><operator start="36:17" end="36:17">&gt;</operator><literal type="number" start="36:18" end="36:20">0.1</literal><operator start="36:21" end="36:22">||</operator><name start="36:23" end="36:27">err_y</name><operator start="36:28" end="36:28">&gt;</operator><literal type="number" start="36:29" end="36:31">0.1</literal></expr>)</condition>
	<block start="37:9" end="37:30">{<block_content start="37:10" end="37:29"><expr_stmt start="37:10" end="37:19"><expr start="37:10" end="37:18"><name start="37:10" end="37:14">vel_x</name><operator start="37:15" end="37:15">=</operator><literal type="number" start="37:16" end="37:18">0.3</literal></expr>;</expr_stmt><expr_stmt start="37:20" end="37:29"><expr start="37:20" end="37:28"><name start="37:20" end="37:24">ang_z</name><operator start="37:25" end="37:25">=</operator><literal type="number" start="37:26" end="37:28">0.0</literal></expr>;</expr_stmt></block_content>}</block></if><comment type="line" start="37:31" end="37:59">//ROS_INFO("1..S=%d",state);}</comment>
	<if type="elseif" start="38:9" end="39:31">else if<condition start="38:16" end="38:26">(<expr start="38:17" end="38:25"><name start="38:17" end="38:23">err_yaw</name><operator start="38:24" end="38:24">&gt;</operator><literal type="number" start="38:25" end="38:25">2</literal></expr>)</condition>
	<block start="39:9" end="39:31">{<block_content start="39:10" end="39:30"><expr_stmt start="39:10" end="39:20"><expr start="39:10" end="39:19"><name start="39:10" end="39:14">ang_z</name><operator start="39:15" end="39:15">=</operator><literal type="number" start="39:16" end="39:19">0.15</literal></expr>;</expr_stmt><expr_stmt start="39:21" end="39:30"><expr start="39:21" end="39:29"><name start="39:21" end="39:25">vel_x</name><operator start="39:26" end="39:26">=</operator><literal type="number" start="39:27" end="39:29">0.0</literal></expr>;</expr_stmt></block_content>}</block></if><comment type="line" start="39:32" end="39:60">//ROS_INFO("2..S=%d",state);}</comment>
	<else start="40:9" end="45:9">else
	<block start="41:9" end="45:9">{<block_content start="42:17" end="44:42">
		<expr_stmt start="42:17" end="42:34"><expr start="42:17" end="42:33"><name start="42:17" end="42:21">state</name><operator start="42:22" end="42:22">=</operator><operator start="42:23" end="42:23">(</operator><name start="42:24" end="42:28">state</name><operator start="42:29" end="42:29">+</operator><literal type="number" start="42:30" end="42:30">1</literal><operator start="42:31" end="42:31">)</operator><operator start="42:32" end="42:32">%</operator><literal type="number" start="42:33" end="42:33">8</literal></expr>;</expr_stmt>
		<expr_stmt start="43:17" end="43:26"><expr start="43:17" end="43:25"><name start="43:17" end="43:21">ang_z</name><operator start="43:22" end="43:22">=</operator><literal type="number" start="43:23" end="43:25">0.0</literal></expr>;</expr_stmt><expr_stmt start="43:27" end="43:36"><expr start="43:27" end="43:35"><name start="43:27" end="43:31">vel_x</name><operator start="43:32" end="43:32">=</operator><literal type="number" start="43:33" end="43:35">0.0</literal></expr>;</expr_stmt>
		<expr_stmt start="44:17" end="44:42"><expr start="44:17" end="44:41"><call start="44:17" end="44:41"><name start="44:17" end="44:24">ROS_INFO</name><argument_list start="44:25" end="44:41">(<argument start="44:26" end="44:34"><expr start="44:26" end="44:34"><literal type="string" start="44:26" end="44:34">"3..S=%d"</literal></expr></argument>,<argument start="44:36" end="44:40"><expr start="44:36" end="44:40"><name start="44:36" end="44:40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
</block_content>}</block></function>

<function start="49:1" end="51:1"><type start="49:1" end="49:3"><name start="49:1" end="49:3">int</name></type> <name start="49:5" end="49:8">mult</name><parameter_list start="49:9" end="49:22">(<parameter start="49:10" end="49:14"><decl start="49:10" end="49:14"><type start="49:10" end="49:14"><name start="49:10" end="49:12">int</name></type> <name start="49:14" end="49:14">x</name></decl></parameter>, <parameter start="49:17" end="49:21"><decl start="49:17" end="49:21"><type start="49:17" end="49:21"><name start="49:17" end="49:19">int</name></type> <name start="49:21" end="49:21">y</name></decl></parameter>)</parameter_list> <block start="49:24" end="51:1">{<block_content start="50:9" end="50:21">
	<return start="50:9" end="50:21">return <expr start="50:16" end="50:20"><name start="50:16" end="50:16">x</name> <operator start="50:18" end="50:18">*</operator> <name start="50:20" end="50:20">y</name></expr>;</return>
</block_content>}</block></function>
	
<comment type="line" start="53:1" end="53:43">//Callback function for the Position topic </comment>
<function start="54:1" end="65:1"><type start="54:1" end="54:4"><name start="54:1" end="54:4">void</name></type> <name start="54:6" end="54:18">pose_callback</name><parameter_list start="54:19" end="54:71">(<parameter start="54:20" end="54:70"><decl start="54:20" end="54:70"><type start="54:20" end="54:66"><specifier start="54:20" end="54:24">const</specifier> <name start="54:26" end="54:65"><name start="54:26" end="54:38">geometry_msgs</name><operator start="54:39" end="54:40">::</operator><name start="54:41" end="54:65">PoseWithCovarianceStamped</name></name><modifier start="54:66" end="54:66">&amp;</modifier></type> <name start="54:68" end="54:70">msg</name></decl></parameter>)</parameter_list>
<block start="55:1" end="65:1">{<block_content start="58:9" end="63:73">
	<comment type="line" start="56:9" end="56:69">//This function is called when a new pose message is received</comment>

	<expr_stmt start="58:9" end="58:37"><expr start="58:9" end="58:36"><name start="58:9" end="58:9">X</name> <operator start="58:11" end="58:11">=</operator> <name start="58:13" end="58:36"><name start="58:13" end="58:15">msg</name><operator start="58:16" end="58:16">.</operator><name start="58:17" end="58:20">pose</name><operator start="58:21" end="58:21">.</operator><name start="58:22" end="58:25">pose</name><operator start="58:26" end="58:26">.</operator><name start="58:27" end="58:34">position</name><operator start="58:35" end="58:35">.</operator><name start="58:36" end="58:36">x</name></name></expr>;</expr_stmt> <comment type="line" start="58:39" end="58:58">// Robot X psotition</comment>
	<expr_stmt start="59:9" end="59:37"><expr start="59:9" end="59:36"><name start="59:9" end="59:9">Y</name> <operator start="59:11" end="59:11">=</operator> <name start="59:13" end="59:36"><name start="59:13" end="59:15">msg</name><operator start="59:16" end="59:16">.</operator><name start="59:17" end="59:20">pose</name><operator start="59:21" end="59:21">.</operator><name start="59:22" end="59:25">pose</name><operator start="59:26" end="59:26">.</operator><name start="59:27" end="59:34">position</name><operator start="59:35" end="59:35">.</operator><name start="59:36" end="59:36">y</name></name></expr>;</expr_stmt> <comment type="line" start="59:39" end="59:58">// Robot Y psotition</comment>
	<decl_stmt start="60:9" end="60:59"><decl start="60:9" end="60:58"><type start="60:9" end="60:14"><name start="60:9" end="60:14">double</name></type> <name start="60:16" end="60:18">Yaw</name> <init start="60:20" end="60:58">= <expr start="60:22" end="60:58"><call start="60:22" end="60:58"><name start="60:22" end="60:31"><name start="60:22" end="60:23">tf</name><operator start="60:24" end="60:25">::</operator><name start="60:26" end="60:31">getYaw</name></name><argument_list start="60:32" end="60:58">(<argument start="60:33" end="60:57"><expr start="60:33" end="60:57"><name start="60:33" end="60:57"><name start="60:33" end="60:35">msg</name><operator start="60:36" end="60:36">.</operator><name start="60:37" end="60:40">pose</name><operator start="60:41" end="60:41">.</operator><name start="60:42" end="60:45">pose</name><operator start="60:46" end="60:46">.</operator><name start="60:47" end="60:57">orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" start="60:61" end="60:72">// Robot Yaw</comment>
	<expr_stmt start="61:9" end="61:41"><expr start="61:9" end="61:40"><name start="61:9" end="61:19">yaw_degrees</name> <operator start="61:21" end="61:21">=</operator> <name start="61:23" end="61:25">Yaw</name> <operator start="61:27" end="61:27">*</operator> <literal type="number" start="61:29" end="61:33">180.0</literal> <operator start="61:35" end="61:35">/</operator> <name start="61:37" end="61:40">M_PI</name></expr>;</expr_stmt> <comment type="line" start="61:43" end="61:66">// conversion to degrees</comment>
	<if_stmt start="62:9" end="62:51"><if start="62:9" end="62:51">if<condition start="62:11" end="62:29">( <expr start="62:13" end="62:27"><name start="62:13" end="62:23">yaw_degrees</name> <operator start="62:25" end="62:25">&lt;</operator> <literal type="number" start="62:27" end="62:27">0</literal></expr> )</condition><block type="pseudo" start="62:31" end="62:51"><block_content start="62:31" end="62:51"> <expr_stmt start="62:31" end="62:51"><expr start="62:31" end="62:50"><name start="62:31" end="62:41">yaw_degrees</name> <operator start="62:43" end="62:44">+=</operator> <literal type="number" start="62:46" end="62:50">360.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" start="62:53" end="62:90">// convert negative to positive angles</comment>
	<expr_stmt start="63:9" end="63:73"><expr start="63:9" end="63:72"><call start="63:9" end="63:72"><name start="63:9" end="63:16">ROS_INFO</name><argument_list start="63:17" end="63:72">(<argument start="63:18" end="63:52"><expr start="63:18" end="63:52"><literal type="string" start="63:18" end="63:52">"pose_callback X: %f Y: %f Yaw: %f"</literal></expr></argument>, <argument start="63:55" end="63:55"><expr start="63:55" end="63:55"><name start="63:55" end="63:55">X</name></expr></argument>, <argument start="63:58" end="63:58"><expr start="63:58" end="63:58"><name start="63:58" end="63:58">Y</name></expr></argument>, <argument start="63:61" end="63:71"><expr start="63:61" end="63:71"><name start="63:61" end="63:71">yaw_degrees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
</block_content>}</block></function>

<function start="67:1" end="112:1"><type start="67:1" end="67:3"><name start="67:1" end="67:3">int</name></type> <name start="67:5" end="67:8">main</name><parameter_list start="67:9" end="67:31">(<parameter start="67:10" end="67:17"><decl start="67:10" end="67:17"><type start="67:10" end="67:17"><name start="67:10" end="67:12">int</name></type> <name start="67:14" end="67:17">argc</name></decl></parameter>, <parameter start="67:20" end="67:30"><decl start="67:20" end="67:30"><type start="67:20" end="67:30"><name start="67:20" end="67:23">char</name> <modifier start="67:25" end="67:25">*</modifier><modifier start="67:26" end="67:26">*</modifier></type><name start="67:27" end="67:30">argv</name></decl></parameter>)</parameter_list>
<block start="68:1" end="112:1">{<block_content start="70:9" end="111:17">
	<comment type="line" start="69:9" end="69:38">//Initialize the ROS framework</comment>
	<expr_stmt start="70:9" end="70:44"><expr start="70:9" end="70:43"><call start="70:9" end="70:43"><name start="70:9" end="70:17"><name start="70:9" end="70:11">ros</name><operator start="70:12" end="70:13">::</operator><name start="70:14" end="70:17">init</name></name><argument_list start="70:18" end="70:43">(<argument start="70:19" end="70:22"><expr start="70:19" end="70:22"><name start="70:19" end="70:22">argc</name></expr></argument>,<argument start="70:24" end="70:27"><expr start="70:24" end="70:27"><name start="70:24" end="70:27">argv</name></expr></argument>,<argument start="70:29" end="70:42"><expr start="70:29" end="70:42"><literal type="string" start="70:29" end="70:42">"main_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt start="71:9" end="71:26"><decl start="71:9" end="71:25"><type start="71:9" end="71:23"><name start="71:9" end="71:23"><name start="71:9" end="71:11">ros</name><operator start="71:12" end="71:13">::</operator><name start="71:14" end="71:23">NodeHandle</name></name></type> <name start="71:25" end="71:25">n</name></decl>;</decl_stmt>

	<comment type="line" start="73:9" end="73:62">//Subscribe to the desired topics and assign callbacks</comment>
	<decl_stmt start="74:9" end="74:79"><decl start="74:9" end="74:78"><type start="74:9" end="74:23"><name start="74:9" end="74:23"><name start="74:9" end="74:11">ros</name><operator start="74:12" end="74:13">::</operator><name start="74:14" end="74:23">Subscriber</name></name></type> <name start="74:25" end="74:32">pose_sub</name> <init start="74:34" end="74:78">= <expr start="74:36" end="74:78"><call start="74:36" end="74:78"><name start="74:36" end="74:46"><name start="74:36" end="74:36">n</name><operator start="74:37" end="74:37">.</operator><name start="74:38" end="74:46">subscribe</name></name><argument_list start="74:47" end="74:78">(<argument start="74:48" end="74:59"><expr start="74:48" end="74:59"><literal type="string" start="74:48" end="74:59">"/amcl_pose"</literal></expr></argument>, <argument start="74:62" end="74:62"><expr start="74:62" end="74:62"><literal type="number" start="74:62" end="74:62">1</literal></expr></argument>, <argument start="74:65" end="74:77"><expr start="74:65" end="74:77"><name start="74:65" end="74:77">pose_callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" start="76:9" end="76:48">//Setup topics to Publish from this node</comment>
	<decl_stmt start="77:9" end="77:108"><decl start="77:9" end="77:107"><type start="77:9" end="77:22"><name start="77:9" end="77:22"><name start="77:9" end="77:11">ros</name><operator start="77:12" end="77:13">::</operator><name start="77:14" end="77:22">Publisher</name></name></type> <name start="77:24" end="77:41">velocity_publisher</name> <init start="77:43" end="77:107">= <expr start="77:45" end="77:107"><call start="77:45" end="77:107"><name start="77:45" end="77:77"><name start="77:45" end="77:45">n</name><operator start="77:46" end="77:46">.</operator><name start="77:47" end="77:55">advertise</name><argument_list type="generic" start="77:56" end="77:77">&lt;<argument start="77:57" end="77:76"><expr start="77:57" end="77:76"><name start="77:57" end="77:76"><name start="77:57" end="77:69">geometry_msgs</name><operator start="77:70" end="77:71">::</operator><name start="77:72" end="77:76">Twist</name></name></expr></argument>&gt;</argument_list></name><argument_list start="77:78" end="77:107">(<argument start="77:79" end="77:103"><expr start="77:79" end="77:103"><literal type="string" start="77:79" end="77:103">"/cmd_vel_mux/input/navi"</literal></expr></argument>, <argument start="77:106" end="77:106"><expr start="77:106" end="77:106"><literal type="number" start="77:106" end="77:106">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
	<comment type="line" start="79:9" end="79:35">//Velocity control variable</comment>
	<decl_stmt start="80:9" end="80:33"><decl start="80:9" end="80:32"><type start="80:9" end="80:28"><name start="80:9" end="80:28"><name start="80:9" end="80:21">geometry_msgs</name><operator start="80:22" end="80:23">::</operator><name start="80:24" end="80:28">Twist</name></name></type> <name start="80:30" end="80:32">vel</name></decl>;</decl_stmt>

	<comment type="line" start="82:9" end="82:27">//Set the loop rate</comment>
	<decl_stmt start="83:9" end="83:32"><decl start="83:9" end="83:31"><type start="83:9" end="83:17"><name start="83:9" end="83:17"><name start="83:9" end="83:11">ros</name><operator start="83:12" end="83:13">::</operator><name start="83:14" end="83:17">Rate</name></name></type> <name start="83:19" end="83:27">loop_rate</name><argument_list start="83:28" end="83:31">(<argument start="83:29" end="83:30"><expr start="83:29" end="83:30"><literal type="number" start="83:29" end="83:30">20</literal></expr></argument>)</argument_list></decl>;</decl_stmt>    <comment type="line" start="83:37" end="83:54">//20Hz update rate</comment>

	
	<while start="86:9" end="109:9">while <condition start="86:15" end="86:25">(<expr start="86:16" end="86:24"><call start="86:16" end="86:24"><name start="86:16" end="86:22"><name start="86:16" end="86:18">ros</name><operator start="86:19" end="86:20">::</operator><name start="86:21" end="86:22">ok</name></name><argument_list start="86:23" end="86:24">()</argument_list></call></expr>)</condition>
	<block start="87:9" end="109:9">{<block_content start="88:17" end="107:99">
		<expr_stmt start="88:17" end="88:34"><expr start="88:17" end="88:33"><call start="88:17" end="88:33"><name start="88:17" end="88:31"><name start="88:17" end="88:25">loop_rate</name><operator start="88:26" end="88:26">.</operator><name start="88:27" end="88:31">sleep</name></name><argument_list start="88:32" end="88:33">()</argument_list></call></expr>;</expr_stmt> <comment type="line" start="88:36" end="88:59">//Maintain the loop rate</comment>
		<expr_stmt start="89:17" end="89:32"><expr start="89:17" end="89:31"><call start="89:17" end="89:31"><name start="89:17" end="89:29"><name start="89:17" end="89:19">ros</name><operator start="89:20" end="89:21">::</operator><name start="89:22" end="89:29">spinOnce</name></name><argument_list start="89:30" end="89:31">()</argument_list></call></expr>;</expr_stmt>   <comment type="line" start="89:36" end="89:59">//Check for new messages</comment>
    
		<comment type="line" start="91:17" end="91:43">//Main loop code goes here:</comment>
		<switch start="92:17" end="101:47">switch<condition start="92:23" end="92:29">(<expr start="92:24" end="92:28"><name start="92:24" end="92:28">state</name></expr>)</condition><block start="92:30" end="101:47">{<block_content start="93:17" end="101:46">
		<case start="93:17" end="93:23">case <expr start="93:22" end="93:22"><literal type="number" start="93:22" end="93:22">0</literal></expr>:</case><expr_stmt start="93:24" end="93:37"><expr start="93:24" end="93:36"><call start="93:24" end="93:36"><name start="93:24" end="93:29">goal_d</name><argument_list start="93:30" end="93:36">(<argument start="93:31" end="93:31"><expr start="93:31" end="93:31"><literal type="number" start="93:31" end="93:31">1</literal></expr></argument>,<argument start="93:33" end="93:33"><expr start="93:33" end="93:33"><literal type="number" start="93:33" end="93:33">0</literal></expr></argument>,<argument start="93:35" end="93:35"><expr start="93:35" end="93:35"><literal type="number" start="93:35" end="93:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="93:38" end="93:43">break;</break>
		<case start="94:17" end="94:23">case <expr start="94:22" end="94:22"><literal type="number" start="94:22" end="94:22">1</literal></expr>:</case><expr_stmt start="94:24" end="94:38"><expr start="94:24" end="94:37"><call start="94:24" end="94:37"><name start="94:24" end="94:29">goal_d</name><argument_list start="94:30" end="94:37">(<argument start="94:31" end="94:31"><expr start="94:31" end="94:31"><literal type="number" start="94:31" end="94:31">1</literal></expr></argument>,<argument start="94:33" end="94:33"><expr start="94:33" end="94:33"><literal type="number" start="94:33" end="94:33">0</literal></expr></argument>,<argument start="94:35" end="94:36"><expr start="94:35" end="94:36"><literal type="number" start="94:35" end="94:36">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="94:39" end="94:44">break;</break>
		<case start="95:17" end="95:23">case <expr start="95:22" end="95:22"><literal type="number" start="95:22" end="95:22">2</literal></expr>:</case><expr_stmt start="95:24" end="95:38"><expr start="95:24" end="95:37"><call start="95:24" end="95:37"><name start="95:24" end="95:29">goal_d</name><argument_list start="95:30" end="95:37">(<argument start="95:31" end="95:31"><expr start="95:31" end="95:31"><literal type="number" start="95:31" end="95:31">1</literal></expr></argument>,<argument start="95:33" end="95:33"><expr start="95:33" end="95:33"><literal type="number" start="95:33" end="95:33">1</literal></expr></argument>,<argument start="95:35" end="95:36"><expr start="95:35" end="95:36"><literal type="number" start="95:35" end="95:36">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="95:39" end="95:44">break;</break>
		<case start="96:17" end="96:23">case <expr start="96:22" end="96:22"><literal type="number" start="96:22" end="96:22">3</literal></expr>:</case><expr_stmt start="96:24" end="96:39"><expr start="96:24" end="96:38"><call start="96:24" end="96:38"><name start="96:24" end="96:29">goal_d</name><argument_list start="96:30" end="96:38">(<argument start="96:31" end="96:31"><expr start="96:31" end="96:31"><literal type="number" start="96:31" end="96:31">1</literal></expr></argument>,<argument start="96:33" end="96:33"><expr start="96:33" end="96:33"><literal type="number" start="96:33" end="96:33">1</literal></expr></argument>,<argument start="96:35" end="96:37"><expr start="96:35" end="96:37"><literal type="number" start="96:35" end="96:37">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="96:40" end="96:45">break;</break>
		<case start="97:17" end="97:23">case <expr start="97:22" end="97:22"><literal type="number" start="97:22" end="97:22">4</literal></expr>:</case><expr_stmt start="97:24" end="97:39"><expr start="97:24" end="97:38"><call start="97:24" end="97:38"><name start="97:24" end="97:29">goal_d</name><argument_list start="97:30" end="97:38">(<argument start="97:31" end="97:31"><expr start="97:31" end="97:31"><literal type="number" start="97:31" end="97:31">0</literal></expr></argument>,<argument start="97:33" end="97:33"><expr start="97:33" end="97:33"><literal type="number" start="97:33" end="97:33">1</literal></expr></argument>,<argument start="97:35" end="97:37"><expr start="97:35" end="97:37"><literal type="number" start="97:35" end="97:37">180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="97:40" end="97:45">break;</break>
		<case start="98:17" end="98:23">case <expr start="98:22" end="98:22"><literal type="number" start="98:22" end="98:22">5</literal></expr>:</case><expr_stmt start="98:24" end="98:39"><expr start="98:24" end="98:38"><call start="98:24" end="98:38"><name start="98:24" end="98:29">goal_d</name><argument_list start="98:30" end="98:38">(<argument start="98:31" end="98:31"><expr start="98:31" end="98:31"><literal type="number" start="98:31" end="98:31">0</literal></expr></argument>,<argument start="98:33" end="98:33"><expr start="98:33" end="98:33"><literal type="number" start="98:33" end="98:33">1</literal></expr></argument>,<argument start="98:35" end="98:37"><expr start="98:35" end="98:37"><literal type="number" start="98:35" end="98:37">270</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="98:40" end="98:45">break;</break>
		<case start="99:17" end="99:23">case <expr start="99:22" end="99:22"><literal type="number" start="99:22" end="99:22">6</literal></expr>:</case><expr_stmt start="99:24" end="99:39"><expr start="99:24" end="99:38"><call start="99:24" end="99:38"><name start="99:24" end="99:29">goal_d</name><argument_list start="99:30" end="99:38">(<argument start="99:31" end="99:31"><expr start="99:31" end="99:31"><literal type="number" start="99:31" end="99:31">0</literal></expr></argument>,<argument start="99:33" end="99:33"><expr start="99:33" end="99:33"><literal type="number" start="99:33" end="99:33">0</literal></expr></argument>,<argument start="99:35" end="99:37"><expr start="99:35" end="99:37"><literal type="number" start="99:35" end="99:37">270</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="99:40" end="99:45">break;</break>
		<case start="100:17" end="100:23">case <expr start="100:22" end="100:22"><literal type="number" start="100:22" end="100:22">7</literal></expr>:</case><expr_stmt start="100:24" end="100:39"><expr start="100:24" end="100:38"><call start="100:24" end="100:38"><name start="100:24" end="100:29">goal_d</name><argument_list start="100:30" end="100:38">(<argument start="100:31" end="100:31"><expr start="100:31" end="100:31"><literal type="number" start="100:31" end="100:31">0</literal></expr></argument>,<argument start="100:33" end="100:33"><expr start="100:33" end="100:33"><literal type="number" start="100:33" end="100:33">0</literal></expr></argument>,<argument start="100:35" end="100:37"><expr start="100:35" end="100:37"><literal type="number" start="100:35" end="100:37">358</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break start="100:40" end="100:45">break;</break>
		<default start="101:17" end="101:24">default:</default> <expr_stmt start="101:26" end="101:46"><expr start="101:26" end="101:45"><call start="101:26" end="101:45"><name start="101:26" end="101:33">ROS_INFO</name><argument_list start="101:34" end="101:45">(<argument start="101:35" end="101:44"><expr start="101:35" end="101:44"><literal type="string" start="101:35" end="101:44">"DEfaultt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></switch>
		<expr_stmt start="102:17" end="102:37"><expr start="102:17" end="102:36"><name start="102:17" end="102:28"><name start="102:17" end="102:19">vel</name><operator start="102:20" end="102:20">.</operator><name start="102:21" end="102:26">linear</name><operator start="102:27" end="102:27">.</operator><name start="102:28" end="102:28">x</name></name> <operator start="102:30" end="102:30">=</operator> <name start="102:32" end="102:36">vel_x</name></expr>;</expr_stmt> <comment type="line" start="102:39" end="102:57">// set linear speed</comment>
		<expr_stmt start="103:17" end="103:38"><expr start="103:17" end="103:37"><name start="103:17" end="103:29"><name start="103:17" end="103:19">vel</name><operator start="103:20" end="103:20">.</operator><name start="103:21" end="103:27">angular</name><operator start="103:28" end="103:28">.</operator><name start="103:29" end="103:29">z</name></name> <operator start="103:31" end="103:31">=</operator> <name start="103:33" end="103:37">ang_z</name></expr>;</expr_stmt> <comment type="line" start="103:40" end="103:59">// set angular speed</comment>

		
		<expr_stmt start="106:17" end="106:48"><expr start="106:17" end="106:47"><call start="106:17" end="106:47"><name start="106:17" end="106:42"><name start="106:17" end="106:34">velocity_publisher</name><operator start="106:35" end="106:35">.</operator><name start="106:36" end="106:42">publish</name></name><argument_list start="106:43" end="106:47">(<argument start="106:44" end="106:46"><expr start="106:44" end="106:46"><name start="106:44" end="106:46">vel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" start="106:50" end="106:80">// Publish the command velocity</comment>
		<expr_stmt start="107:17" end="107:99"><expr start="107:17" end="107:98"><call start="107:17" end="107:98"><name start="107:17" end="107:25">ROS_DEBUG</name><argument_list start="107:26" end="107:98">(<argument start="107:27" end="107:68"><expr start="107:27" end="107:68"><literal type="string" start="107:27" end="107:68">"Main - Velocity commands: v - %f, w - %f"</literal></expr></argument>, <argument start="107:71" end="107:82"><expr start="107:71" end="107:82"><name start="107:71" end="107:82"><name start="107:71" end="107:73">vel</name><operator start="107:74" end="107:74">.</operator><name start="107:75" end="107:80">linear</name><operator start="107:81" end="107:81">.</operator><name start="107:82" end="107:82">x</name></name></expr></argument>, <argument start="107:85" end="107:97"><expr start="107:85" end="107:97"><name start="107:85" end="107:97"><name start="107:85" end="107:87">vel</name><operator start="107:88" end="107:88">.</operator><name start="107:89" end="107:95">angular</name><operator start="107:96" end="107:96">.</operator><name start="107:97" end="107:97">z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	</block_content>}</block></while>

	<return start="111:9" end="111:17">return <expr start="111:16" end="111:16"><literal type="number" start="111:16" end="111:16">0</literal></expr>;</return>
</block_content>}</block></function></unit>